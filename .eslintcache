[{"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\index.js":"1","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\App.js":"2","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\static_UI\\slogn.jsx":"3","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\donationPage.jsx":"4","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\home.jsx":"5","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\BodyHolder.jsx":"6","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\members.jsx":"7","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\commiteHead.jsx":"8","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addMember.jsx":"9","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\rules.jsx":"10","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\login.jsx":"11","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addSubmissions.jsx":"12","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\updateMember.jsx":"13","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\logout.jsx":"14","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\AdminBodyHolder.jsx":"15","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\moneyInformation.jsx":"16","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\annualSubmittedAmount.jsx":"17","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addAllocateAmount.jsx":"18","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addAmount.jsx":"19","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addAnnualSubmiitedAmount.jsx":"20","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\apiURL.js":"21","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\useLoginState.js":"22","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\data\\members.js":"23","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\navigation.jsx":"24","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\static_UI\\navigation.jsx":"25"},{"size":219,"mtime":1611417271902,"results":"26","hashOfConfig":"27"},{"size":3290,"mtime":1614521283506,"results":"28","hashOfConfig":"27"},{"size":314,"mtime":1615651070997,"results":"29","hashOfConfig":"27"},{"size":5035,"mtime":1615650980860,"results":"30","hashOfConfig":"27"},{"size":2682,"mtime":1615652002545,"results":"31","hashOfConfig":"27"},{"size":531,"mtime":1615559923121,"results":"32","hashOfConfig":"27"},{"size":4603,"mtime":1615651019669,"results":"33","hashOfConfig":"27"},{"size":3448,"mtime":1615567541818,"results":"34","hashOfConfig":"27"},{"size":5968,"mtime":1615650676230,"results":"35","hashOfConfig":"27"},{"size":274,"mtime":1615695017097,"results":"36","hashOfConfig":"27"},{"size":2985,"mtime":1615650753910,"results":"37","hashOfConfig":"27"},{"size":3449,"mtime":1615650704541,"results":"38","hashOfConfig":"27"},{"size":7571,"mtime":1615650825846,"results":"39","hashOfConfig":"27"},{"size":485,"mtime":1615650829899,"results":"40","hashOfConfig":"27"},{"size":419,"mtime":1615650767082,"results":"41","hashOfConfig":"27"},{"size":11255,"mtime":1615651068664,"results":"42","hashOfConfig":"27"},{"size":9735,"mtime":1615650911628,"results":"43","hashOfConfig":"27"},{"size":10146,"mtime":1615650415423,"results":"44","hashOfConfig":"27"},{"size":14315,"mtime":1615650529590,"results":"45","hashOfConfig":"27"},{"size":13389,"mtime":1615650620027,"results":"46","hashOfConfig":"27"},{"size":68,"mtime":1615650305399,"results":"47","hashOfConfig":"27"},{"size":187,"mtime":1614433954761,"results":"48","hashOfConfig":"27"},{"size":2664,"mtime":1612158675281,"results":"49","hashOfConfig":"27"},{"size":2863,"mtime":1615567464749,"results":"50","hashOfConfig":"27"},{"size":2959,"mtime":1615652161755,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1xknyxf",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\index.js",[],["113","114"],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\App.js",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\static_UI\\slogn.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\donationPage.jsx",["115","116"],"import React from 'react';\r\nimport {Table} from 'react-bootstrap'\r\nimport {useState,useEffect} from 'react'\r\nimport {members} from './../../../data/members'\r\nimport axios from 'axios';\r\nimport {apiURL} from './../../apiURL'\r\nfunction Donations(props) {\r\n\r\n\r\n    const [memeber,setMember] = useState(members)\r\n    let [allocatedAmount,setAllocatedAmount] = useState();\r\n\r\n    const [pageLoading,setPageLoading] = useState(true);\r\n    const [isMemberLoading,setIsMemeberLoading] = useState(false);\r\n    const [isAmountAllocatedLoading,setAllocatedLoading] = useState(false);\r\n    let [final_list,setFinalList] = useState();\r\n\r\n    useEffect(() => {\r\n        axios.get(`${apiURL}/v1/member`)\r\n            .then(res => {\r\n                    // get data from json\r\n            const data = res.data.data;\r\n            const mem_data = data.member;\r\n            // console.log(mem_data)\r\n\r\n            setMember(mem_data)\r\n            \r\n            setIsMemeberLoading(true);\r\n        })\r\n        .catch(err => {\r\n            console.log(\"fail to Load data\")\r\n        })\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`${apiURL}/v1/allocateAmount`)\r\n            .then(res => {\r\n            const data = res.data.data;\r\n            const mem_data = data.allocatedAmount;\r\n            setAllocatedAmount(mem_data);\r\n            setAllocatedLoading(true);\r\n        })\r\n        .catch(err => {\r\n            console.log(\"fail to Load data\")\r\n        })\r\n    },[]);\r\n  \r\n    if(isMemberLoading===true && isAmountAllocatedLoading===true){\r\n        let flt_members = [];\r\n\r\n        // get the ids of allocated amount members\r\n        const allocatedAmount_ID = allocatedAmount.map(el => el._id_member)\r\n        // Search in the member list\r\n        memeber.filter(function(el){\r\n\r\n            // if matched then\r\n            if(allocatedAmount_ID.includes(el._id)){\r\n                // get the id from the filtr_mem\r\n                const mem_ID= allocatedAmount_ID[allocatedAmount_ID.indexOf(el._id)];\r\n                \r\n                // get all the info of the allocated member list\r\n                const mem = allocatedAmount.filter(function (el){\r\n                    if(el._id_member===mem_ID){\r\n                        return el\r\n                    }\r\n                })\r\n                // loop in mem and push to the array\r\n                mem.map(elm => (\r\n                    flt_members.push({\r\n                    name:el.name,\r\n                    village:el.village_Name,\r\n                    date:elm.date.substring(0,10),\r\n                    amount: elm.amount,\r\n                    heads: elm.assign_by.join(),\r\n                    reason:elm.reason,\r\n                })\r\n                ))\r\n      \r\n            }\r\n        })\r\n        setPageLoading(false);\r\n        setFinalList(flt_members);\r\n        setIsMemeberLoading(false);\r\n        setAllocatedLoading(false);\r\n\r\n    }\r\n    \r\n    // get List of Allocated Amount\r\n\r\n    if(pageLoading===true){\r\n\r\n       return(<div>Loading</div>)\r\n        \r\n    }\r\n    else{\r\n        return (\r\n        <div style={{marginTop:\"10px\"}} className=\"tableContainor\">\r\n                <div className=\"tableHolder\">\r\n                     <Table className=\"tbs\" striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                       \r\n                        \r\n                        <th style={{textAlign:'right'}}>وجہ</th>\r\n                        <th style={{textAlign:'right'}}>سرپرستی</th>\r\n                        <th style={{textAlign:'right'}}>رقم</th>\r\n                        <th style={{textAlign:'right'}}>تاریح</th>\r\n\r\n                        <th style={{textAlign:'right'}}>محلہ</th>\r\n\r\n                        <th style={{textAlign:'right'}}>نام</th>\r\n                         <th style={{textAlign:'right'}}>#</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      \r\n                        {final_list.map((el,key) =>(\r\n                            <tr key={key}>                 \r\n                                <td style={{textAlign:'right'}}>{el.reason}</td>\r\n\r\n                                <td style={{textAlign:'right'}}>{el.heads}</td>\r\n                                <td style={{textAlign:'right'}}>{el.amount}</td>\r\n                                \r\n                                <td style={{textAlign:'right'}}>{el.date}</td>\r\n\r\n                                <td style={{textAlign:'right'}}>{el.village}</td>\r\n                                <td style={{textAlign:'right'}}>{el.name}</td>\r\n                                <td style={{textAlign:'right'}}>{key+1}</td>\r\n                            </tr>\r\n\r\n                        ))}      \r\n                      \r\n                        \r\n                      \r\n                        \r\n                    </tbody>\r\n                </Table>\r\n                </div>\r\n               \r\n            </div>\r\n    );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Donations;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\home.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\BodyHolder.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\members.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\commiteHead.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addMember.jsx",["117","118"],"import React from 'react';\r\nimport {useState,useEffect} from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport {Dropdown,DropdownButton} from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport {useNavigate  } from \"react-router-dom\";\r\nimport getToken from './../../../useLoginState'\r\nimport {apiURL} from './../../apiURL'\r\nfunction AdminAddMember(props) {\r\n\r\n    // Hooks\r\n    const villagNameArray = [\"دلوخیل\",\"اباخیل\",\"ناورخیل\",\"آذیذان\",\"وانڈا\"]\r\n\r\n    const [village,setVillage] = useState(villagNameArray[0]);\r\n    const [villageNAME,setVillageNAME] = useState(villagNameArray);\r\n    const [name,setName] =useState('');\r\n    const [date,setDate] =useState('');\r\n    const [ph1,setPh1] =useState('');\r\n    const [ph2,setPh2] =useState('');\r\n    const [perStatus,setperStatus] =useState('');\r\n    const [result,setResult] =useState('');\r\n    let [accepted,setAccepted] =useState(false);\r\n    const navigate = useNavigate();\r\n    \r\n\r\n    // get the list of the village \r\n     useEffect(() => {\r\n        axios.get(`${apiURL}/v1/member`)\r\n            .then(res => {\r\n                    // get data from json\r\n            const data = res.data.data;\r\n            const mem_data = data.member;\r\n                    // get all the village from the member and remove the duplicate\r\n            var villages_n = mem_data.map(data => data.village_Name);\r\n            villages_n = [...new Set(villages_n)];\r\n            setVillageNAME(villages_n)\r\n                  \r\n        })\r\n        .catch(err => {\r\n            console.log(\"fail to Load data\")\r\n        })\r\n    },[]);\r\n    // update Hooks\r\n     const selectEmp = (name) =>{\r\n        setVillage (name)\r\n        \r\n    }\r\n    const updateName = (value) =>{\r\n        setResult(\"\")\r\n        \r\n    }\r\n    const updateDate = (value) =>{\r\n  \r\n        setDate(value);\r\n    }\r\n\r\n    const updatePh1 = (value) =>{\r\n        setPh1(value);\r\n    }\r\n\r\n   const updatePh2 = (value) =>{\r\n        setPh2(value);\r\n    }\r\n    const status = (value) =>{\r\n        setperStatus(value);\r\n    }\r\n  \r\n      const getData = async (url,sub_Data) =>{\r\n        let res = await axios.post(url,sub_Data);\r\n     \r\n        let {status} = res.data;\r\n       \r\n        if(status===\"success\"){\r\n            accepted=true\r\n        }\r\n        else{\r\n            accepted=false\r\n        }\r\n    }\r\n    let addMemner = async(event) =>{\r\n        event.preventDefault();\r\n        const data = {\r\n            name:name,\r\n            village_Name:village,\r\n            personal_phon:ph1,\r\n            relative_phon:ph2,\r\n            data_of_joining:date,\r\n            status:\"\"\r\n        }\r\n        const url = `${apiURL}/v1/member`;\r\n        await getData(url,data);\r\n        if(accepted===true){\r\n            setResult(\"Member Registerd...\")\r\n            setAccepted(false);\r\n        }\r\n        else{\r\n            setResult(\"Fail to Register Member\")\r\n        }\r\n\r\n\r\n    }\r\n    if(getToken()===false){\r\n        navigate('/login',true);\r\n        return \"test\"\r\n        \r\n    }\r\n    else{\r\n        return (\r\n        <div className=\"center-loginForm\">\r\n           <div className=\"l-form\">\r\n                <Form>\r\n                    {/* Name */}\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => updateName(event.target.value)} type=\"text\" placeholder=\"Enter name\" />\r\n                    <Form.Text className=\"text-muted\">\r\n                    Please enter the name\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                {/* Village Name */}\r\n                <Form.Group>\r\n                    <Form.Label>Village</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={village}>\r\n                        {villageNAME.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                selectEmp(name)\r\n                        }}>{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n\r\n                {/* date Picker */}\r\n\r\n                <Form.Group controlId=\"dob\">\r\n                    <Form.Label>Select Date</Form.Label>\r\n                    <Form.Control onSelect={event => updateDate(event.target.value)} type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" />\r\n                </Form.Group>\r\n                \r\n\r\n                {/* Phone number 1 */}\r\n\r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Personal Phone NO.</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => updatePh1(event.target.value)} type=\"text\" placeholder=\"Enter your phone number\" />\r\n                   \r\n                </Form.Group>\r\n\r\n                {/* Phone number 2 */}\r\n                \r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Relative Phone No.</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => updatePh2(event.target.value)} type=\"text\" placeholder=\"Relative Phone number\" />\r\n                </Form.Group>\r\n                \r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Status</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => status(event.target.value)} type=\"text\" placeholder=\"Member Status\" />\r\n                </Form.Group>\r\n                <div> {result} </div>\r\n                <Button onClick={(event)=>{\r\n                    addMemner(event);\r\n                }} variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n           </div>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default AdminAddMember;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\rules.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\login.jsx",["119"],"import React from 'react';\r\nimport {useState} from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport { useNavigate  } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport {apiURL} from './../../apiURL'\r\n\r\nfunction AdminLogin(props) {\r\n\r\n    // Hooks\r\n    const [email,setEmail] =useState('');\r\n    const [password,setPassowrd] =useState('');\r\n    const navigate = useNavigate();\r\n    const [message,setMessage] = useState('');\r\n    // const { token, setToken } = useToken();\r\n    // update Hooks\r\n    const updateEmail = (value) =>{\r\n        setMessage('')\r\n        setEmail(value);\r\n    }\r\n    const updatePass = (value) =>{\r\n        setPassowrd(value);\r\n    }\r\n    const getToken = () => {\r\n        const tokenString = sessionStorage.getItem(\"token\");\r\n        const userToken = JSON.parse(tokenString);\r\n        return userToken===null ? false : true;\r\n    };\r\n    const addFunctionAmount= async (url,data) =>{\r\n            let res = await axios.post(url,(data));\r\n         \r\n            if(res.data.members !== 0){\r\n                sessionStorage.setItem(\"token\", JSON.stringify(res.data.token));\r\n                navigate('/admin/addMember',true);\r\n\r\n            }\r\n            else{\r\n                setMessage('Fail to login...')\r\n            }\r\n\r\n            \r\n    }\r\n    const submitRespose = async (event) =>{\r\n        event.preventDefault();\r\n        const data = {\r\n            email:email,\r\n            password:password\r\n        }\r\n       \r\n        await addFunctionAmount(`${apiURL}/v1/login/varify`,data);\r\n        \r\n    }\r\n   \r\n    return (\r\n        \r\n        <div className=\"center-loginForm\">\r\n           <div className=\"l-form\">\r\n                <Form>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email address</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => updateEmail(event.target.value)} type=\"email\" placeholder=\"Enter email\" />\r\n                    <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    {/* set Passwrod */}\r\n                    <Form.Control onChange={event => updatePass(event.target.value)} type=\"password\" placeholder=\"Password\" />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n                </Form.Group>\r\n                <p>{message}</p>\r\n                <Button variant=\"primary\" onClick={(event)=>{\r\n                    submitRespose(event);\r\n                }} type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n           </div>\r\n        </div>\r\n    );\r\n    \r\n   \r\n}\r\n\r\nexport default AdminLogin;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addSubmissions.jsx",["120","121","122"],"import React from 'react';\r\nimport {useState} from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport {Dropdown,DropdownButton} from 'react-bootstrap'\r\nimport {apiURL} from './../../apiURL'\r\n// read ALl the name with spicfic village\r\n\r\nfunction AdminAddSubmission(props) {\r\n\r\n    // Hooks\r\n    const villagNameArray = [\"دلوخیل\",\"اباخیل\",\"ناورخیل\",\"آذیذان\",\"وانڈا\"]\r\n\r\n    const [village,setVillage] = useState(villagNameArray[0]);\r\n    const [listOfname,setListOfName] =useState([]);\r\n    const [memberName,setName] = useState('');\r\n    const [date,setDate] =useState('');\r\n    const [amount,setAmount] =useState('500');\r\n\r\n\r\n    // update Hooks\r\n     const updateVillage = (name) =>{\r\n        setVillage (name)\r\n        // read the name by viilage\r\n        // setName(Array Of Name)\r\n        const testName = ['a','v']\r\n        setListOfName(testName)\r\n    }\r\n    const updateName = (value) =>{\r\n        setName(value);\r\n    }\r\n    const updateDate = (value) =>{\r\n        setDate(value);\r\n    }\r\n    \r\n    const updateAmount = (value) =>{\r\n        setAmount(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"center-loginForm\">\r\n           <div className=\"l-form\">\r\n                <Form>\r\n                    {/* Name */}\r\n                \r\n\r\n                {/* Village Name */}\r\n                <Form.Group>\r\n                    <Form.Label>Village</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={village}>\r\n                        {villagNameArray.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                updateVillage(name)\r\n                        }}>{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n\r\n                {/* Name */}\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                     <Form.Label>Select Member</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={memberName}>\r\n                        {listOfname.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                updateName(name)\r\n                        }}>{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n\r\n                {/* date Picker */}\r\n\r\n                <Form.Group controlId=\"dob\">\r\n                    <Form.Label>Select Date</Form.Label>\r\n                    <Form.Control onSelect={event => updateDate(event.target.value)} type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" />\r\n                </Form.Group>\r\n                \r\n\r\n                {/* Amount*/}\r\n\r\n                \r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Relative Phone No.</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => updateAmount(event.target.value)} type=\"number\" placeholder=\"Enter Amount\" />\r\n                  \r\n                </Form.Group>\r\n                \r\n                <Button onClick={()=>{\r\n                   \r\n                }} variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminAddSubmission;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\updateMember.jsx",["123","124"],"import React from 'react';\r\nimport {useState,useEffect} from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport {Dropdown,DropdownButton} from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport {members} from './../../../data/members'\r\nimport {useNavigate  } from \"react-router-dom\";\r\nimport getToken from './../../../useLoginState'\r\nimport {apiURL} from './../../apiURL'\r\nfunction AdminUpdateMember(props) {\r\n\r\n    // Hooks\r\n    const villagNameArray = [\"دلوخیل\",\"اباخیل\",\"ناورخیل\",\"آذیذان\",\"وانڈا\"]\r\n\r\n    const [village,setVillage] = useState(villagNameArray[0]);\r\n    const [villageNAME,setVillageNAME] = useState(villagNameArray);\r\n    let [listOfNameByVillage,setListOfNameByVillage] = useState([]);\r\n    const [listofMembersByVillage,setlistOfMemberByVillage] = useState(members);\r\n    const [name,setName] =useState('');\r\n    const [personalNumebr,setPersonalNumber] =useState('');\r\n    const [realtiveNumber,setRelativeNumber] =useState('');\r\n    const [result,setResult] =useState('');\r\n    let [accepted,setAccepted] =useState(false);\r\n    const [isloadingMemeber,setIsLoadingMember] = useState(false);\r\n    // const [returnApplied,setReturnApplied] =useState(false);\r\n    const navigate = useNavigate();\r\n\r\n\r\n    // member\r\n    const [member,setMember] = useState(members)\r\n    const listOfmemberByVillage = (vill,members) =>{\r\n       \r\n        const filter_members = members.filter(function(el) {\r\n                if(el.village_Name === vill){\r\n                    return el;\r\n                }\r\n        })\r\n        return filter_members;\r\n    }\r\n    const nameofMembers = (village,mem) =>{\r\n        var membersByVillage = listOfmemberByVillage(village,mem);\r\n        const member_names = membersByVillage.map(el =>(el.name))\r\n        return {\r\n            member_V: membersByVillage,\r\n            member_N: member_names\r\n        };\r\n    }\r\n    const objectByName = (names) =>{\r\n        // console.log(listofMembersByVillage)\r\n        const el = listofMembersByVillage.filter(el => el.name===names ? (el) : \"\")\r\n        return el\r\n    }\r\n     \r\n\r\n    // get the list of the village \r\n     useEffect(() => {\r\n        axios.get(`${apiURL}/v1/member`)\r\n            .then(res => {\r\n                    // get data from json\r\n            const data = res.data.data;\r\n            const mem_data = data.member;\r\n            setMember(mem_data)\r\n            \r\n            \r\n            // get all the village from the member and remove the duplicate\r\n            var villages_n = mem_data.map(data => data.village_Name);\r\n            villages_n = [...new Set(villages_n)];\r\n            // const listOfMemberByVillage = (listOfmemberByVillage(villages_n[0],mem_data))\r\n            let name_list = nameofMembers(villages_n[0],mem_data)\r\n            \r\n          \r\n            setlistOfMemberByVillage(name_list.member_V)\r\n            setListOfNameByVillage(name_list.member_N)\r\n            setName((name_list.member_N)[0])\r\n            // setVillage(name)\r\n            setVillage(villages_n[0]) \r\n            setVillageNAME(villages_n);\r\n                \r\n            // get the member object by name and  set the number the feild\r\n            // member by village\r\n\r\n            setIsLoadingMember(true);\r\n            // member name for the selected village\r\n\r\n        })\r\n        .catch(err => {\r\n            console.log(\"fail to Load data\")\r\n        })\r\n    },[]);\r\n\r\n    const selectEmp = (Villagename) =>{\r\n        let name_list = nameofMembers(Villagename,member)\r\n        setlistOfMemberByVillage(name_list.member_V)\r\n        setListOfNameByVillage(name_list.member_N)\r\n        setVillage (Villagename)\r\n        setResult(\"\")\r\n        \r\n        \r\n    }\r\n    const updateName = (Membername) =>{\r\n       \r\n        setName(Membername)\r\n        let memberr = objectByName(Membername); \r\n        setRelativeNumber(memberr[0].relative_phon);\r\n        setPersonalNumber(memberr[0].personal_phon);\r\n    }\r\n   \r\n\r\n    const updatePrsonalNumber = (value) =>{\r\n        setPersonalNumber(value);\r\n        setResult(\"\")\r\n\r\n    }\r\n    const updateRelativeNumber = (value) =>{\r\n        setRelativeNumber(value);\r\n        setResult(\"\")\r\n\r\n    }\r\n  \r\n\r\n  \r\n      const getData = async (url,sub_Data) =>{\r\n        let res = await axios.patch(url,sub_Data);\r\n        let {status} = res.data;\r\n        if(status===\"success\"){\r\n            accepted=true\r\n        }\r\n        else{\r\n            accepted=false\r\n        }\r\n    }\r\n    let addMemner = async(event) =>{\r\n        event.preventDefault();\r\n        let  mem = objectByName(name);\r\n      \r\n        const data = {\r\n            personal_phon: personalNumebr,\r\n            relative_phon: realtiveNumber,\r\n        }\r\n        const url = `${apiURL}/v1/member/${mem[0]._id}`;\r\n        // console.log(url)\r\n        await getData(url,data);\r\n        if(accepted===true){\r\n            setResult(\"Upated ...\")\r\n            setAccepted(false);\r\n        }\r\n        else{\r\n            setResult(\"Fail to Update\")\r\n        }\r\n        \r\n\r\n    }\r\n     if(getToken()===false){\r\n        navigate('/login');\r\n    }\r\n    if(isloadingMemeber===false){\r\n       return ( <div>Loading .......</div>)\r\n    }\r\n    else{\r\n        return (\r\n        <div className=\"center-loginForm\">\r\n           <div className=\"l-form\">\r\n                <Form>\r\n                    <Form.Group>\r\n                    <Form.Label>Village</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={village}>\r\n                        {villageNAME.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                selectEmp(name)\r\n                        }}>{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n                    {/* Name */}\r\n                <Form.Group>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={name}>\r\n                        {listOfNameByVillage.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                updateName(name)\r\n                        }} >{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n\r\n         \r\n\r\n                {/* Phone number 1 */}\r\n\r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Personal Phone No.</Form.Label>\r\n              \r\n                    <Form.Control value={personalNumebr} onChange={event => updatePrsonalNumber(event.target.value)} type=\"text\" placeholder=\"Enter Amount\" />\r\n                   \r\n                </Form.Group>\r\n\r\n                {/* Phone number 2 */}\r\n                \r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Relative Phone No.</Form.Label>\r\n                   \r\n                    <Form.Control value={realtiveNumber} onChange={event => updateRelativeNumber(event.target.value)} type=\"text\" placeholder=\"Enter Amount\" />\r\n                   \r\n                </Form.Group>\r\n               \r\n\r\n          \r\n                <div> {result} </div>\r\n                <Button onClick={(event)=>{\r\n                    addMemner(event);\r\n                }} variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n           </div>\r\n        </div>\r\n    );\r\n    }\r\n    \r\n}\r\n\r\nexport default AdminUpdateMember;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\logout.jsx",["125"],"import React from 'react';\r\nimport {useNavigate  } from \"react-router-dom\";\r\nimport getToken from './../../../useLoginState'\r\nimport {useEffect} from 'react'\r\n\r\n\r\nfunction AdminLogout(props) {\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(()=>{\r\n         if(getToken()!==false){\r\n        sessionStorage.clear();\r\n        navigate('/login',true);\r\n    }\r\n    },[])\r\n   \r\n\r\n    return (\r\n            <div>Logout</div>\r\n    );\r\n    \r\n \r\n    \r\n   \r\n}\r\n\r\nexport default AdminLogout;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\AdminBodyHolder.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\moneyInformation.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\dynamic_UI\\annualSubmittedAmount.jsx",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addAllocateAmount.jsx",["126","127","128","129"],"import React from 'react';\r\nimport {useState,useEffect} from 'react'\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport {Dropdown,DropdownButton,Table} from 'react-bootstrap'\r\nimport axios from 'axios';\r\nimport {members} from './../../../data/members'\r\nimport {useNavigate  } from \"react-router-dom\";\r\nimport getToken from './../../../useLoginState'\r\nimport {apiURL} from './../../apiURL'\r\n\r\nfunction AdminAllocateAmount(props) {\r\n\r\n    // Hooks\r\n    const villagNameArray = [\"دلوخیل\",\"اباخیل\",\"ناورخیل\",\"آذیذان\",\"وانڈا\"]\r\n\r\n    const [village,setVillage] = useState(villagNameArray[0]);\r\n    const [villageNAME,setVillageNAME] = useState(villagNameArray);\r\n    let [listOfNameByVillage,setListOfNameByVillage] = useState([]);\r\n    let [listOFCommiteHead,setListofCommitteHeads] = useState([]);\r\n    const [listofMembersByVillage,setlistOfMemberByVillage] = useState(members);\r\n    const [name,setName] =useState('');\r\n    const [date,setDate] =useState('');\r\n    const [head,setHead] =useState('');\r\n    const [reason,setReason] =useState('');\r\n    const [amount,setAmount] =useState('');\r\n    const [result,setResult] =useState('');\r\n    let [accepted,setAccepted] =useState(false);\r\n    const [isloadingMemeber,setIsLoadingMember] = useState(false);\r\n    const [returnApplied,setReturnApplied] =useState(false);\r\n    const navigate = useNavigate();\r\n     const [amounts,setAmounts] = useState('');\r\n    // member\r\n    const [member,setMember] = useState(members)\r\n    const listOfmemberByVillage = (vill,members) =>{\r\n       \r\n        const filter_members = members.filter(function(el) {\r\n                if(el.village_Name === vill){\r\n                    return el;\r\n                }\r\n        })\r\n        return filter_members;\r\n    }\r\n    const nameofMembers = (village,mem) =>{\r\n        var membersByVillage = listOfmemberByVillage(village,mem);\r\n        const member_names = membersByVillage.map(el =>(el.name))\r\n        return {\r\n            member_V: membersByVillage,\r\n            member_N: member_names\r\n        };\r\n    }\r\n      const idByName = (names) =>{\r\n        const _id = listofMembersByVillage.filter(el => el.name===names ? (el._id) : \"\")\r\n        return _id\r\n    }\r\n      const listofCommittiMembers = () =>{\r\n        \r\n        let listofMemberss = member.filter(function(el){\r\n            if(el.status!==\"\" && el.status!==\"-\"){\r\n                return (el)\r\n            }\r\n           \r\n        })\r\n        return listofMemberss\r\n    }\r\n\r\n    // get the list of the village \r\n     useEffect(() => {\r\n        axios.get(`${apiURL}/v1/member`)\r\n            .then(res => {\r\n                    // get data from json\r\n            const data = res.data.data;\r\n            const mem_data = data.member;\r\n            setMember(mem_data)\r\n            \r\n            \r\n            \r\n            \r\n            // get all the village from the member and remove the duplicate\r\n            var villages_n = mem_data.map(data => data.village_Name);\r\n            villages_n = [...new Set(villages_n)];\r\n            // const listOfMemberByVillage = (listOfmemberByVillage(villages_n[0],mem_data))\r\n            let name_list = nameofMembers(villages_n[0],mem_data)\r\n            const listOFheads = listofCommittiMembers();\r\n            setHead(listOFheads[0].name)\r\n            setListofCommitteHeads(listOFheads)\r\n            setlistOfMemberByVillage(name_list.member_V)\r\n            setListOfNameByVillage(name_list.member_N)\r\n            setName((name_list.member_N)[0])\r\n            setVillage(name)\r\n            setVillage(villages_n[0]) \r\n            setVillageNAME(villages_n);\r\n            // member by village\r\n            setIsLoadingMember(true);\r\n            // member name for the selected village\r\n\r\n        })\r\n        .catch(err => {\r\n            console.log(\"fail to Load data\")\r\n        })\r\n    },[]);\r\n    useEffect(() => {\r\n            axios.get(`${apiURL}/v1/amount`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const mem_data = data.amounts;\r\n                    setAmounts(mem_data[0].committe_amount)\r\n                               \r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n\r\n        },[]);\r\n\r\n    const selectEmp = (name) =>{\r\n        let name_list = nameofMembers(name,member)\r\n        setlistOfMemberByVillage(name_list.member_V)\r\n        setListOfNameByVillage(name_list.member_N)\r\n        setVillage (name)\r\n        \r\n    }\r\n    const updateName = (value) =>{\r\n        setName(value)\r\n        \r\n    }\r\n    const updateDate = (value) =>{\r\n        setDate(value);\r\n    }\r\n\r\n    const updateAmount = (value) =>{\r\n        setAmount(value);\r\n    }\r\n    const CommiteHead = (value) =>{\r\n        setHead(value);\r\n    }\r\n    const reas =(val) =>{\r\n        setReason(val)\r\n    }\r\n    const rtrunApplied =(val) =>{\r\n        setReturnApplied(val)\r\n    }\r\n\r\n  \r\n      const getData = async (url,sub_Data) =>{\r\n        let res = await axios.post(url,sub_Data);\r\n        let {status} = res.data;\r\n        if(status===\"success\"){\r\n            accepted=true\r\n        }\r\n        else{\r\n            accepted=false\r\n        }\r\n    }\r\n      const addFunctionAmount= async (url,data) =>{\r\n           await axios.patch(url,data);          \r\n        }\r\n    let addMemner = async(event) =>{\r\n        event.preventDefault();\r\n        let  mem_ID = idByName(name);\r\n        mem_ID = mem_ID[0]._id\r\n        const data = {\r\n            _id_member: mem_ID,\r\n            date:date,\r\n            amount:amount,\r\n            assign_by:listOFCommiteHead.map(el =>el.name),\r\n            reason:reason,\r\n            return_applied:returnApplied,\r\n            amount_returned:{dates:[\"\"],amount:[\"\"]}\r\n        }\r\n\r\n        \r\n        const url = `${apiURL}/v1/allocateAmount`;\r\n        await getData(url,data);\r\n        const temp_amount= amounts-amount;\r\n        if(accepted===true){\r\n            const url = `${apiURL}/v1/amount/6035e2aea95ade2cf0053857`;\r\n                // data to update\r\n                const d = {\r\n                    committe_amount: temp_amount,\r\n                }\r\n                // method to send post request\r\n            await addFunctionAmount(url,d)\r\n            setResult(\"Amount Alloted...\")\r\n            setAccepted(false);\r\n        }\r\n        else{\r\n            setResult(\"Fail to Allocate Amount\")\r\n        }\r\n        setReturnApplied(false);\r\n\r\n    }\r\n     if(getToken()===false){\r\n        navigate('/login');\r\n    }\r\n    if(isloadingMemeber===false){\r\n       return ( <div>Loading .......</div>)\r\n    }\r\n    else{\r\n        return (\r\n        <div className=\"center-loginForm\">\r\n           <div className=\"l-form\">\r\n                <Form>\r\n                    <Form.Group>\r\n                    <Form.Label>Village</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={village}>\r\n                        {villageNAME.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                selectEmp(name)\r\n                        }}>{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n                    {/* Name */}\r\n                <Form.Group>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={name}>\r\n                        {listOfNameByVillage.map((name,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                updateName(name)\r\n                        }} >{name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n\r\n                {/* Village Name */}\r\n                \r\n\r\n                {/* date Picker */}\r\n\r\n                <Form.Group controlId=\"dob\">\r\n                    <Form.Label>Select Date</Form.Label>\r\n                    <Form.Control onSelect={event => updateDate(event.target.value)} type=\"date\" name=\"dob\" placeholder=\"Date of Birth\" />\r\n                </Form.Group>\r\n                \r\n\r\n                {/* Phone number 1 */}\r\n\r\n                 <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Enter Amount</Form.Label>\r\n                    {/* set Email */}\r\n                    <Form.Control onChange={event => updateAmount(event.target.value)} type=\"text\" placeholder=\"Enter Amount\" />\r\n                   \r\n                </Form.Group>\r\n\r\n                {/* Phone number 2 */}\r\n                \r\n                 <Form.Group>\r\n                    <Form.Label>Alloted By:</Form.Label>\r\n                    <DropdownButton id=\"dropdown-basic-button\" title={head}>\r\n                        {listOFCommiteHead.map((el,key)=>\r\n                        <Dropdown.Item key={key} onSelect ={() =>{\r\n                                CommiteHead(el.name)\r\n                        }}>{el.name}\r\n                        </Dropdown.Item>\r\n                    )}   \r\n                    </DropdownButton>\r\n                </Form.Group>\r\n                \r\n                <Form.Group id=\"formGridCheckbox\">\r\n                    <Form.Check type=\"checkbox\" onChange={()=>{\r\n                        rtrunApplied(true)\r\n                    }} label=\"Return Applied\" />\r\n                </Form.Group>\r\n\r\n               <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label>Reason</Form.Label>\r\n                    <Form.Control as=\"textarea\" name=\"description\" value={reason}  onChange={event => reas(event.target.value)}  rows={3} >{reason}</Form.Control>\r\n                </Form.Group>\r\n                <div> {result} </div>\r\n                <Button onClick={(event)=>{\r\n                    addMemner(event);\r\n                }} variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n           </div>\r\n        </div>\r\n    );\r\n    }\r\n    \r\n}\r\n\r\nexport default AdminAllocateAmount;","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addAmount.jsx",["130","131","132"],"/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React from 'react';\r\nimport {Dropdown,DropdownButton,Table,Form,Button} from 'react-bootstrap'\r\nimport {useState,useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport {useNavigate  } from \"react-router-dom\";\r\nimport getToken from './../../../useLoginState'\r\nimport {members} from './../../../data/members'\r\nimport {apiURL} from './../../apiURL'\r\n// ------------------------ steps --------------------------------\r\n// Inite the Hooks\r\n\r\n// filter the amount data by filterAmount Function (date selected by the user)\r\n    // get the year and month\r\n    // search the year and monthe\r\n    // filter the (allAmount) and store to (filter_amounts)\r\n// filter the member by village\r\n    // select the village\r\n    // filter the (allMember) by village name (village(hook))\r\n    // save to (filter_membres)\r\n\r\n// call all the method once\r\n    // if the both request scefully executed then \r\n    // call both methods and set (filteringDone(true)) so that we can render it on UI at the same time set x=1 so that this condition dont exec repeativly bx it casuing error\r\n    \r\n// call all the methon state change\r\n    // for each hook call the all the function and pass the parameter\r\n\r\n\r\n\r\n    // sequence\r\n        // Method\r\n            // filterAmount\r\n            // filterMemberByVillage\r\n            // getFinal_filterData\r\n        // useEffect\r\n            // member\r\n            // amount\r\n        // condition\r\n            // check if the both api success\r\n            // insure that condition exe once\r\n        // Update hooks\r\n            // Year\r\n            // Month\r\n            // Village\r\nfunction adminAddAmount(props) {\r\n    const getDate = () =>{\r\n        var utc = new Date().toJSON().slice(0,10).replace(/-/g,'-');\r\n        return utc;\r\n    }\r\n    const year = [\"2020\",\"2021\",\"2022\",\"2023\",\"2024\"];\r\n    const monthName = [\"دسمبر\",\"نومبر\",\"اکتوبر\",\"ستمبر\",\"اگست\",\"جولائ\",\"جون\",\"مئ\",\"اپریل\",\"مارچ\",\"فروری\",\"جنوری\"].reverse()\r\n    // const d  =\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const [deafultYear,setDefaultYear] = useState(getDate().substring(0,4));\r\n    const [month,setMonth] = useState(monthName[0]);\r\n    const [villages_NAME,setVillagesNAME] =useState([])\r\n    const [village,setVillage] = useState(\"\");\r\n    const [isloadingMemeber,setIsLoadingMember] = useState(true);\r\n    const [isloadingAmount,setIsLoadingAmount] = useState(true);\r\n    const [allMember,setAllMember] =useState(members);\r\n    const [allAmount,setAllAmount] =useState([]);\r\n    const  [filter_membres,setFilter_Member] =useState();\r\n    var [filter_amounts,setFilter_Amounts]=useState() ;\r\n    var [x,setx]= useState(0);\r\n    const [final_filterAmount,set_finalFilter_Amount]= useState([])\r\n    const [filteringDone,setFilteringDone] = useState(false)\r\n    let accepted = false;\r\n    const [amount,setAmount] = useState('');\r\n    const res_amount = 500;\r\n    const navigate = useNavigate();\r\n\r\n\r\n        \r\n        const filterAmount = (months,deafultYear) =>{\r\n            // get List of the current month(0,7)\r\n            console.log(months)\r\n            let month_index = monthName.indexOf(months)+1;\r\n            if(month_index<10){\r\n                month_index = \"0\"+month_index;\r\n            }\r\n            const date = deafultYear+\"-\"+month_index;\r\n            console.log(date);\r\n            // eslint-disable-next-line array-callback-return\r\n            const filter_amount = allAmount.filter(function(el) {\r\n                const obj = el.submission_date+\"\";\r\n                if(obj.substring(0,7) === date){\r\n                    return el;\r\n                }\r\n            })\r\n            console.log(filter_amount)\r\n            return filter_amount;\r\n\r\n        \r\n        }\r\n        const filterMemberByVillage = (selected_village) =>{\r\n            // eslint-disable-next-line array-callback-return\r\n            const filter_members = allMember.filter(function(el) {\r\n                if(el.village_Name === selected_village){\r\n                    return el;\r\n                }\r\n            })\r\n            return filter_members;\r\n            // setFilter_Members(filter_members)\r\n        \r\n        }\r\n        const getFinal_filterData = (flt_amounts,flt_members) =>{\r\n           \r\n            var _id_amount ;\r\n            if(flt_amounts.length !== 0 ){\r\n                _id_amount = flt_amounts.map(el => el._id_memeber);\r\n            \r\n                const datas = flt_members.filter(el => !(_id_amount.includes(el._id)))\r\n                return datas\r\n             \r\n            }\r\n            else{ \r\n                return flt_members;\r\n            }\r\n        }\r\n        const getFinal_filterData_id = (_id) =>{\r\n           \r\n            // in the final filter data if the this amount exist remove it\r\n            const datas = final_filterAmount.filter(el => !(_id.includes(el._id)))\r\n            set_finalFilter_Amount(datas);  \r\n          \r\n             \r\n        }\r\n        // get the list of the members.....\r\n        useEffect(() => {\r\n            axios.get(`${apiURL}/v1/member`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const mem_data = data.member;\r\n                    setAllMember(mem_data);  \r\n            \r\n                    // get all the village from the member and remove the duplicate\r\n                    var villages_n = mem_data.map(data => data.village_Name);\r\n                    villages_n = [...new Set(villages_n)];\r\n                    // -----> set VALUES to HOOKS <-------\r\n                    // get the first Villge\r\n                    setVillage(villages_n[0])\r\n                    // store the array of village\r\n                    setVillagesNAME(villages_n)\r\n\r\n                    setIsLoadingMember(false);              \r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n\r\n        },[]);\r\n            useEffect(() => {\r\n            axios.get(`${apiURL}/v1/amount`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const mem_data = data.amounts;\r\n                    setAmount(mem_data[0].committe_amount)\r\n                    console.log(mem_data[0].committe_amount)\r\n                               \r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n\r\n        },[]);\r\n    // get All amount\r\n        useEffect(() => {\r\n            axios.get(`${apiURL}/v1/submittedAmount`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const all_amount = data.member;\r\n                \r\n                    setAllAmount(all_amount);\r\n                    // call the method to fillter the data\r\n                    setIsLoadingAmount(false);\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n        },[month,village]);\r\n     \r\n    // conditions\r\n    \r\n        if(isloadingMemeber===false && isloadingAmount===false){\r\n         \r\n            setFilteringDone(true)\r\n            //    getFinal_filterData();\r\n        }\r\n        if(filteringDone===true && x===0 ){\r\n            setIsLoadingAmount(true);\r\n            setIsLoadingMember(true);\r\n            const  filter_amount = filterAmount(month,deafultYear);\r\n            const filter_members=filterMemberByVillage(village);\r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n            \r\n            setx(1);\r\n        }\r\n    // update the hooks \r\n        const setYear = (year) =>{\r\n            setDefaultYear(year);\r\n            const  filter_amount = filterAmount(month,year);\r\n            const filter_members=filterMemberByVillage(village);\r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n        }\r\n        const selectMonth = (name) => {\r\n           \r\n            setMonth (name)\r\n            const  filter_amount = filterAmount(name,deafultYear);\r\n            const filter_members=filterMemberByVillage(village);\r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n        }\r\n        const selectEmp = (name) => {\r\n            setVillage (name)\r\n            const  filter_amount = filterAmount(month,deafultYear);\r\n            const filter_members=filterMemberByVillage(name);\r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n\r\n        }\r\n        const addFunctionAmount= async (url,data) =>{\r\n           await axios.patch(url,data);          \r\n        }\r\n        const getData = async (url,sub_Data) =>{\r\n            let res = await axios.post(url,sub_Data);\r\n            let {status} = res.data;\r\n           \r\n            const temp_amount= amount+res_amount;\r\n            if(status===\"success\"){\r\n                \r\n                const url = `${apiURL}/v1/amount/6035e2aea95ade2cf0053857`;\r\n                // data to update\r\n                const d = {\r\n                    committe_amount: temp_amount,\r\n                }\r\n                // method to send post request\r\n                await addFunctionAmount(url,d)\r\n\r\n\r\n               accepted=true\r\n            }\r\n            else{\r\n                accepted=false\r\n            }\r\n            setAmount(temp_amount);\r\n\r\n        }\r\n        const oncheck_BOX = async(_id) =>{\r\n            \r\n            const month_index = monthName.indexOf(month)+1;\r\n            const day = getDate().substring(8,10);\r\n            const date = deafultYear +\"-\"+ month_index+\"-\"+ day;\r\n\r\n            const data = { _id_memeber: _id, submission_date:date};\r\n            const url = `${apiURL}/v1/submittedAmount`;\r\n            await getData(url,data)\r\n            if(accepted===true){\r\n                getFinal_filterData_id(_id)\r\n                accepted=false;\r\n            }\r\n            \r\n\r\n        }\r\n        if(getToken()===false){\r\n            navigate('/login');\r\n        }\r\n        if(filteringDone===true){\r\n            \r\n              return (\r\n        <div className=\"moneyInformation-Containor addAmountComboBx\">\r\n            \r\n            \r\n            <div className=\"comnoBox\">\r\n                 <DropdownButton id=\"dropdown-basic-button\" title={deafultYear}>\r\n                        {year.map((years,key)=>\r\n                    <Dropdown.Item key={key} onSelect ={() =>{\r\n                        setYear(years)\r\n                    }}>{years}</Dropdown.Item>\r\n                )}   \r\n                </DropdownButton>\r\n\r\n                <p className=\"ComboTags tag\">سال</p>\r\n                 <DropdownButton className=\"DropDown\" id=\"dropdown-basic-button\" title={month}>\r\n                     {monthName.map((name)=>\r\n                    <Dropdown.Item key={name} onClick ={() =>{\r\n                        selectMonth(name)\r\n                    }}>{name}</Dropdown.Item>\r\n                )}\r\n          \r\n                </DropdownButton>\r\n\r\n                <p className=\"ComboTags tag\">مہینہ</p>\r\n                 <DropdownButton id=\"dropdown-basic-button\" title={village}>\r\n                        {villages_NAME.map((name,key)=>\r\n                    <Dropdown.Item key={key} onSelect ={() =>{\r\n                        selectEmp(name)\r\n                    }}>{name}</Dropdown.Item>\r\n                )}   \r\n                </DropdownButton>\r\n\r\n                <p className=\"ComboTags tag\">محلہ</p>\r\n                \r\n            </div>\r\n            <div className=\"tableContainor\">\r\n                <div className=\"tableHolder\">\r\n                     <Table className=\"tbs\" striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                       \r\n                        \r\n                        <th style={{textAlign:'right'}}>Add</th>\r\n                        <th style={{textAlign:'right'}}>محلہ</th>\r\n\r\n                        <th style={{textAlign:'right'}}>نام</th>\r\n                         <th style={{textAlign:'right'}}>#</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                     {final_filterAmount.map((element,key) =>\r\n                           \r\n                            <tr key={key}>\r\n                       \r\n                                <td style={{textAlign:'right'}}>\r\n                                     <Button variant=\"primary\"  size=\"md\" onClick = {()=>{\r\n                                        oncheck_BOX(element._id)\r\n                                     }}active>\r\n                                        Submit Amount\r\n                                    </Button>\r\n                                    \r\n                                  \r\n                                </td>\r\n                                <td style={{textAlign:'right'}}>{element.village_Name}</td>\r\n                                <td style={{textAlign:'right'}}>{element.name}</td>\r\n                                <td style={{textAlign:'right'}}>{key+1}</td>\r\n                            </tr>\r\n                        )}\r\n                       \r\n         \r\n                    </tbody>\r\n                </Table>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n            {/* div*/}\r\n            \r\n\r\n\r\n        </div>\r\n    );\r\n        }\r\n        else{return(<div>Loading</div>)}\r\n        \r\n      \r\n    }\r\n    \r\n\r\nexport default adminAddAmount;\r\n\r\n// use too many state now its time ot reduce the number io states","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\addAnnualSubmiitedAmount.jsx",["133","134","135","136","137","138"],"/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React from 'react';\r\nimport {Dropdown,DropdownButton,Table,Form,Button} from 'react-bootstrap'\r\nimport {useState,useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport {useNavigate  } from \"react-router-dom\";\r\nimport getToken from './../../../useLoginState'\r\nimport {apiURL} from './../../apiURL'\r\nimport {members} from './../../../data/members'\r\n// ------------------------ steps --------------------------------\r\n// Inite the Hooks\r\n\r\n// filter the amount data by filterAmount Function (date selected by the user)\r\n    // get the year and month\r\n    // search the year and monthe\r\n    // filter the (allAmount) and store to (filter_amounts)\r\n// filter the member by village\r\n    // select the village\r\n    // filter the (allMember) by village name (village(hook))\r\n    // save to (filter_membres)\r\n\r\n// call all the method once\r\n    // if the both request scefully executed then \r\n    // call both methods and set (filteringDone(true)) so that we can render it on UI at the same time set x=1 so that this condition dont exec repeativly bx it casuing error\r\n    \r\n// call all the methon state change\r\n    // for each hook call the all the function and pass the parameter\r\n\r\n\r\n\r\n    // sequence\r\n        // Method\r\n            // filterAmount\r\n            // filterMemberByVillage\r\n            // getFinal_filterData\r\n        // useEffect\r\n            // member\r\n            // amount\r\n        // condition\r\n            // check if the both api success\r\n            // insure that condition exe once\r\n        // Update hooks\r\n            // Year\r\n            // Month\r\n            // Village\r\nfunction adminAnnualSubmittedAmount(props) {\r\n    const getDate = () =>{\r\n        var utc = new Date().toJSON().slice(0,10).replace(/-/g,'-');\r\n        return utc;\r\n    }\r\n    const year = [\"2020\",\"2021\",\"2022\",\"2023\",\"2024\"];\r\n\r\n    const monthName = [\"دسمبر\",\"نومبر\",\"اکتوبر\",\"ستمبر\",\"اگست\",\"جولائ\",\"جون\",\"مئ\",\"اپریل\",\"مارچ\",\"فروری\",\"جنوری\"].reverse()\r\n    // const d  =\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const [deafultYear,setDefaultYear] = useState(getDate().substring(0,4));\r\n    const [month,setMonth] = useState(monthName[0]);\r\n    const [villages_NAME,setVillagesNAME] =useState([])\r\n    const [village,setVillage] = useState(\"\");\r\n    const [isloadingMemeber,setIsLoadingMember] = useState(true);\r\n    const [isloadingAmount,setIsLoadingAmount] = useState(true);\r\n    const [allMember,setAllMember] =useState(members);\r\n    const [allAmount,setAllAmount] =useState([]);\r\n    const  [filter_membres,setFilter_Member] =useState();\r\n    var [filter_amounts,setFilter_Amounts]=useState() ;\r\n    var [x,setx]= useState(0);\r\n    const [final_filterAmount,set_finalFilter_Amount]= useState([])\r\n    const [filteringDone,setFilteringDone] = useState(false)\r\n    let accepted = false;\r\n    const [amount,setAmount] = useState('');\r\n    const res_amount = 1000;\r\n    const navigate = useNavigate();\r\n    \r\n\r\n\r\n        \r\n        const filterAmount = (deafultYear) =>{\r\n            const filter_amount = allAmount.filter(function(el) {\r\n                const obj = el.submission_date+\"\";\r\n                if(obj.substring(0,4) === deafultYear){\r\n                    return el;\r\n                }\r\n            })\r\n            return filter_amount;\r\n        }\r\n        const filterMemberByVillage = (selected_village) =>{\r\n\r\n            // eslint-disable-next-line array-callback-return\r\n            const filter_members = allMember.filter(function(el) {\r\n                if(el.village_Name === selected_village){\r\n                    return el;\r\n                }\r\n            })\r\n            return filter_members;\r\n            // setFilter_Members(filter_members)\r\n        \r\n        }\r\n        const getFinal_filterData = (flt_amounts,flt_members) =>{\r\n       \r\n            var _id_amount ;\r\n            if(flt_amounts.length !== 0 ){\r\n                _id_amount = flt_amounts.map(el => el._id_memeber);\r\n            \r\n                const datas = flt_members.filter(el => !(_id_amount.includes(el._id)))\r\n              \r\n                return datas\r\n             \r\n            }\r\n            else{ \r\n                return flt_members;\r\n            }\r\n        }\r\n           const getFinal_filterData_id = (_id) =>{\r\n           \r\n           const datas = final_filterAmount.filter(el => !(_id.includes(el._id)))\r\n            set_finalFilter_Amount(datas);  \r\n          \r\n        }\r\n        // get the list of the members.....\r\n        useEffect(() => {\r\n            axios.get(`${apiURL}/v1/member`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const mem_data = data.member;\r\n                    setAllMember(mem_data);  \r\n            \r\n                    // get all the village from the member and remove the duplicate\r\n                    var villages_n = mem_data.map(data => data.village_Name);\r\n                    villages_n = [...new Set(villages_n)];\r\n                    // -----> set VALUES to HOOKS <-------\r\n                    // get the first Villge\r\n                    setVillage(villages_n[0])\r\n                   \r\n\r\n                    // store the array of village\r\n                    setVillagesNAME(villages_n)\r\n\r\n                    setIsLoadingMember(false);              \r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n\r\n        },[]);\r\n        // read the amount\r\n         useEffect(() => {\r\n            axios.get(`${apiURL}/v1/amount`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const mem_data = data.amounts;\r\n                    setAmount(mem_data[0].functions_amount)\r\n                               \r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n\r\n        },[]);\r\n    // get All amount\r\n        useEffect(() => {\r\n            axios.get(`${apiURL}/v1/annualSubmittedAmount`)\r\n                .then(res => {\r\n                    // get data from json\r\n                    const data = res.data.data;\r\n                    const all_amount = data.annual_amounts;\r\n                    setAllAmount(all_amount);\r\n                    // call the method to fillter the data\r\n                    setIsLoadingAmount(false);\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"fail to Load data\")\r\n                })\r\n        },[village]);\r\n     \r\n    // conditions\r\n    \r\n        if(isloadingMemeber===true && isloadingAmount===false){\r\n         \r\n            setFilteringDone(true)\r\n\r\n            //    getFinal_filterData();\r\n        }\r\n        if(filteringDone===true && x===0 ){\r\n            setIsLoadingAmount(true);\r\n            setIsLoadingMember(true);\r\n            const  filter_amount = filterAmount(deafultYear);\r\n            const filter_members=filterMemberByVillage(village);\r\n           \r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n            \r\n            setx(1);\r\n        }\r\n    // update the hooks \r\n        const setYear = (year) =>{\r\n            setDefaultYear(year);\r\n            const  filter_amount = filterAmount(year);\r\n            const filter_members=filterMemberByVillage(village);\r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n        }\r\n      \r\n        const selectEmp = (name) => {\r\n            setVillage (name)\r\n            const  filter_amount = filterAmount(deafultYear);\r\n            const filter_members=filterMemberByVillage(name);\r\n            const datas = getFinal_filterData(filter_amount,filter_members);\r\n            \r\n            setFilter_Amounts(filter_amount);\r\n            setFilter_Member(filter_members);\r\n            set_finalFilter_Amount(datas);\r\n\r\n        }\r\n\r\n        const addFunctionAmount= async (url,data) =>{\r\n            await axios.patch(url,data);\r\n           \r\n        }\r\n        const getData = async (url,sub_Data) =>{\r\n            let res = await axios.post(url,sub_Data);\r\n            let {status} = res.data;\r\n            const temp_amount= amount+res_amount;\r\n\r\n            // add the amount to the amount table\r\n            \r\n            if(status===\"success\"){\r\n                // url\r\n                const url = `${apiURL}/v1/amount/6035e2aea95ade2cf0053857`;\r\n                // data to update\r\n                const d = {\r\n                    functions_amount: temp_amount,\r\n                }\r\n                // method to send post request\r\n                await addFunctionAmount(url,d)\r\n                // add amount\r\n               accepted=true\r\n            }\r\n            else{\r\n                accepted=false\r\n            }\r\n            setAmount(temp_amount);\r\n\r\n\r\n        }\r\n        const oncheck_BOX = async(_id) =>{\r\n            \r\n            // const month_index = monthName.indexOf(month)+1;\r\n            const day = getDate().substring(8,10);\r\n            const month_index = getDate().substring(5,7);\r\n            const date = deafultYear +\"-\"+ month_index+\"-\"+ day;\r\n           \r\n            const data = { _id_memeber: _id, submission_date:date};\r\n            const url = `${apiURL}/v1/annualSubmittedAmount`;\r\n            await getData(url,data)\r\n            if(accepted===true){\r\n                getFinal_filterData_id(_id)\r\n                accepted=false;\r\n            }\r\n            \r\n\r\n        }\r\n        // const getToken = () => {\r\n        //     const tokenString = sessionStorage.getItem(\"token\");\r\n        //     const userToken = JSON.parse(tokenString);\r\n        //     return userToken==null ? false : true;\r\n        // };\r\n        if(getToken()===false){\r\n            navigate('/login');\r\n        }\r\n       \r\n            if(filteringDone===true){\r\n            \r\n              return (\r\n        <div className=\"moneyInformation-Containor addAmountComboBx\">\r\n            \r\n            \r\n            <div className=\"comnoBox\">\r\n                 <DropdownButton id=\"dropdown-basic-button\" title={deafultYear}>\r\n                        {year.map((years,key)=>\r\n                    <Dropdown.Item key={key} onSelect ={() =>{\r\n                        setYear(years)\r\n                    }}>{years}</Dropdown.Item>\r\n                )}   \r\n                </DropdownButton>\r\n\r\n                <p className=\"ComboTags tag\">سال</p>\r\n                 \r\n                 <DropdownButton id=\"dropdown-basic-button\" title={village}>\r\n                        {villages_NAME.map((name,key)=>\r\n                    <Dropdown.Item key={key} onSelect ={() =>{\r\n                        selectEmp(name)\r\n                    }}>{name}</Dropdown.Item>\r\n                )}   \r\n                </DropdownButton>\r\n\r\n                <p className=\"ComboTags tag\">محلہ</p>\r\n                \r\n            </div>\r\n            <div className=\"tableContainor\">\r\n                <div className=\"tableHolder\">\r\n                     <Table className=\"tbs\" striped bordered hover variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                       \r\n                        \r\n                        <th style={{textAlign:'right'}}>Add</th>\r\n                        <th style={{textAlign:'right'}}>محلہ</th>\r\n\r\n                        <th style={{textAlign:'right'}}>نام</th>\r\n                         <th style={{textAlign:'right'}}>#</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                     {final_filterAmount.map((element,key) =>\r\n                           \r\n                            <tr key={key}>\r\n                       \r\n                                <td style={{textAlign:'right'}}>\r\n                                     <Button variant=\"primary\"  size=\"md\" onClick = {()=>{\r\n                                        oncheck_BOX(element._id)\r\n                                     }}active>\r\n                                        Submit Amount\r\n                                    </Button>\r\n                                    \r\n                                  \r\n                                </td>\r\n                                <td style={{textAlign:'right'}}>{element.village_Name}</td>\r\n                                <td style={{textAlign:'right'}}>{element.name}</td>\r\n                                <td style={{textAlign:'right'}}>{key+1}</td>\r\n                            </tr>\r\n                        )}\r\n                       \r\n         \r\n                    </tbody>\r\n                </Table>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n            {/* div*/}\r\n            \r\n\r\n\r\n        </div>\r\n    );\r\n        }\r\n        else{return(<div>Loading</div>)}\r\n        \r\n     \r\n        }\r\n         \r\n    \r\n    \r\n\r\nexport default adminAnnualSubmittedAmount;\r\n\r\n// use too many state now its time ot reduce the number io states","D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\apiURL.js",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\useLoginState.js",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\data\\members.js",[],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\AdminSide_UI\\static_UI\\navigation.jsx",[],["139","140"],"D:\\BootCamp_React\\MarwatCommitteAPP\\MARWAT_COMMITTEE\\Client\\src\\UI\\ClientSide_UI\\static_UI\\navigation.jsx",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":54,"column":24,"nodeType":"147","messageId":"148","endLine":54,"endColumn":32},{"ruleId":"145","severity":1,"message":"149","line":62,"column":52,"nodeType":"147","messageId":"150","endLine":62,"endColumn":61},{"ruleId":"151","severity":1,"message":"152","line":16,"column":17,"nodeType":"153","messageId":"154","endLine":16,"endColumn":24},{"ruleId":"151","severity":1,"message":"155","line":20,"column":12,"nodeType":"153","messageId":"154","endLine":20,"endColumn":21},{"ruleId":"151","severity":1,"message":"156","line":24,"column":11,"nodeType":"153","messageId":"154","endLine":24,"endColumn":19},{"ruleId":"151","severity":1,"message":"157","line":5,"column":9,"nodeType":"153","messageId":"154","endLine":5,"endColumn":15},{"ruleId":"151","severity":1,"message":"158","line":16,"column":12,"nodeType":"153","messageId":"154","endLine":16,"endColumn":16},{"ruleId":"151","severity":1,"message":"159","line":17,"column":12,"nodeType":"153","messageId":"154","endLine":17,"endColumn":18},{"ruleId":"145","severity":1,"message":"149","line":33,"column":47,"nodeType":"147","messageId":"150","endLine":33,"endColumn":55},{"ruleId":"160","severity":1,"message":"161","line":89,"column":7,"nodeType":"162","endLine":89,"endColumn":9,"suggestions":"163"},{"ruleId":"160","severity":1,"message":"164","line":15,"column":7,"nodeType":"162","endLine":15,"endColumn":9,"suggestions":"165"},{"ruleId":"151","severity":1,"message":"166","line":4,"column":33,"nodeType":"153","messageId":"154","endLine":4,"endColumn":38},{"ruleId":"145","severity":1,"message":"149","line":36,"column":47,"nodeType":"147","messageId":"150","endLine":36,"endColumn":55},{"ruleId":"145","severity":1,"message":"149","line":57,"column":44,"nodeType":"147","messageId":"150","endLine":57,"endColumn":52},{"ruleId":"160","severity":1,"message":"167","line":100,"column":7,"nodeType":"162","endLine":100,"endColumn":9,"suggestions":"168"},{"ruleId":"151","severity":1,"message":"169","line":3,"column":39,"nodeType":"153","messageId":"154","endLine":3,"endColumn":43},{"ruleId":"151","severity":1,"message":"170","line":63,"column":13,"nodeType":"153","messageId":"154","endLine":63,"endColumn":27},{"ruleId":"151","severity":1,"message":"171","line":64,"column":10,"nodeType":"153","messageId":"154","endLine":64,"endColumn":24},{"ruleId":"151","severity":1,"message":"169","line":3,"column":39,"nodeType":"153","messageId":"154","endLine":3,"endColumn":43},{"ruleId":"151","severity":1,"message":"172","line":57,"column":12,"nodeType":"153","messageId":"154","endLine":57,"endColumn":17},{"ruleId":"151","severity":1,"message":"173","line":57,"column":18,"nodeType":"153","messageId":"154","endLine":57,"endColumn":26},{"ruleId":"151","severity":1,"message":"170","line":64,"column":13,"nodeType":"153","messageId":"154","endLine":64,"endColumn":27},{"ruleId":"151","severity":1,"message":"171","line":65,"column":10,"nodeType":"153","messageId":"154","endLine":65,"endColumn":24},{"ruleId":"145","severity":1,"message":"149","line":78,"column":52,"nodeType":"147","messageId":"150","endLine":78,"endColumn":60},{"ruleId":"141","replacedBy":"174"},{"ruleId":"143","replacedBy":"175"},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"array-callback-return","Array.prototype.filter() expects a return value from function.","FunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of function.","expectedAtEnd","no-unused-vars","'setName' is assigned a value but never used.","Identifier","unusedVar","'perStatus' is assigned a value but never used.","'getToken' is assigned a value but never used.","'apiURL' is defined but never used.","'date' is assigned a value but never used.","'amount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'nameofMembers'. Either include it or remove the dependency array.","ArrayExpression",["178"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["179"],"'Table' is defined but never used.","React Hook useEffect has missing dependencies: 'listofCommittiMembers', 'name', and 'nameofMembers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVillage' needs the current value of 'name'.",["180"],"'Form' is defined but never used.","'filter_membres' is assigned a value but never used.","'filter_amounts' is assigned a value but never used.","'month' is assigned a value but never used.","'setMonth' is assigned a value but never used.",["176"],["177"],"no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},"Update the dependencies array to be: [nameofMembers]",{"range":"187","text":"188"},"Update the dependencies array to be: [navigate]",{"range":"189","text":"190"},"Update the dependencies array to be: [listofCommittiMembers, name, nameofMembers]",{"range":"191","text":"192"},[3378,3380],"[nameofMembers]",[368,370],"[navigate]",[3820,3822],"[listofCommittiMembers, name, nameofMembers]"]